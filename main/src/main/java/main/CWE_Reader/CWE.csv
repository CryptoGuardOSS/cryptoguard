ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
102,"Struts: Duplicate Validation Forms",Variant,Incomplete,"The application uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.","If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.","::NATURE:ChildOf:CWE ID:694:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Unexpected State::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Duplicate Validation Forms::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::","","",
103,"Struts: Incomplete validate() Method Definition",Variant,Draft,"The application has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().","If you do not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.","::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","::The Struts Validator uses a form's validate() method to check the contents of the form properties against the constraints specified in the associated validation form. That means the following classes have a validate() method that is part of the validation framework: ValidatorForm, ValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If you create a class that extends one of these classes, and if your class implements custom validation logic by overriding the validate() method, you must call super.validate() in your validate() implementation.::","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Other Other Disabling the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Confidentiality Integrity Availability Other Other Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Implement the validate() method and call super.validate() within that method.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Erroneous validate() Method::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::","","TYPE:Relationship:NOTE:This could introduce other weaknesses related to missing input validation.::::TYPE:Maintenance:NOTE:The current description implies a loose composite of two separate weaknesses, so this node might need to be split or converted into a low-level category.::",
104,"Struts: Form Bean Does Not Extend Validation Class",Variant,Draft,"If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.","","::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","::In order to use the Struts Validator, a form must extend one of the following: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and DynaValidatorForm. You must extend one of these classes because the Struts Validator ties in to your application by implementing the validate() method in these classes. Forms derived from the ActionForm and DynaActionForm classes cannot use the Struts Validator.::","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Other Other Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process control, and SQL injection.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Confidentiality Integrity Availability Other Other Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Ensure that all forms extend one of the Validation Classes.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Form Bean Does Not Extend Validation Class::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::","","",
105,"Struts: Form Field Without Validator",Variant,Draft,"The application has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.","Omitting validation for even a single input field may give attackers the leeway they need to compromise the application. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.","::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Unexpected State::SCOPE:Integrity:TECHNICAL IMPACT:Bypass Protection Mechanism:NOTE:Integrity Bypass Protection Mechanism If unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Ensure that you validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Form Field Without Validator::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::","","",
106,"Struts: Plug-in Framework not in Use",Variant,Draft,"When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.","Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.","::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Unexpected State::","","::PHASE:Architecture and Design:STRATEGY:Input Validation:EFFECTIVENESS::DESCRIPTION:Use an input validation framework such as Struts.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:EFFECTIVENESS::DESCRIPTION:Use an input validation framework such as Struts.::PHASE:Implementation:STRATEGY:Input Validation:EFFECTIVENESS::DESCRIPTION:Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in your configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only T or F Free-form strings are of a reasonable length and composition::PHASE:Implementation:STRATEGY:Libraries or Frameworks:EFFECTIVENESS::DESCRIPTION:Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in your configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only T or F Free-form strings are of a reasonable length and composition::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Plug-in Framework Not In Use::","","",
107,"Struts: Unused Validation Form",Variant,Draft,"An unused validation form indicates that validation logic is not up-to-date.","It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.","::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::","::ORDINALITY:Resultant:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION::::PHASE:Operation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Remove the unused Validation Form from the validation.xml file.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Unused Validation Form::","","",
108,"Struts: Unvalidated Action Form",Variant,Incomplete,"Every Action Form must have a corresponding validation form.","If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.","::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Other Other If an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Confidentiality Integrity Availability Other Other Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.::","","::PHASE:Implementation:STRATEGY:Input Validation:EFFECTIVENESS::DESCRIPTION:Map every Action Form to a corresponding validation form. An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Unvalidated Action Form::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::","","",
109,"Struts: Validator Turned Off",Variant,Draft,"Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.","","::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Ensure that an action form mapping enables validation. Set the validate field to true.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Validator Turned Off::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::","","TYPE:Other:NOTE:The Action Form mapping in the demonstrative example disables the form's validate() method. The Struts bean: write tag automatically encodes special HTML characters, replacing a < with &lt; and a > with &gt;. This action can be disabled by specifying filter=false as an attribute of the tag to disable specified JSP pages. However, being disabled makes these pages susceptible to cross-site scripting attacks. An attacker may be able to insert malicious scripts as user input to write to these JSP pages.::",
110,"Struts: Validator Without Form Field",Variant,Draft,"Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.","It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.","::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION::::PHASE:Operation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Other Other It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.::","::METHOD:Automated Static Analysis:EFFECTIVENESS:Moderate:DESCRIPTION:To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.::METHOD:Manual Static Analysis:EFFECTIVENESS:Moderate:DESCRIPTION:To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.::","","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Validator Without Form Field::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::","","",
111,"Direct Use of Unsafe JNI",Base,Draft,"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.","Many safety features that programmers may take for granted simply do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.","::NATURE:ChildOf:CWE ID:695:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Implement error handling around the JNI call.::PHASE:Implementation:STRATEGY:Refactoring:EFFECTIVENESS::DESCRIPTION:Do not use JNI calls if you don't trust the native library.::PHASE:Implementation:STRATEGY:Refactoring:EFFECTIVENESS::DESCRIPTION:Be reluctant to use JNI calls. A Java API equivalent may exist.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Unsafe JNI::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:SEC08-J:ENTRY NAME:Define wrappers around native methods::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
191,"Integer Underflow (Wrap or Wraparound)",Base,Draft,"The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.","This can happen in signed and unsigned cases.","::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1003:ORDINAL:Primary::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","::TERM:Integer underflow:DESCRIPTION:Integer underflow is sometimes used to identify signedness errors in which an originally positive number becomes negative as a result of subtraction. However, there are cases of bad subtraction in which unsigned integers are involved, so it's not always a signedness issue. Integer underflow is occasionally used to describe array index errors in which the index is negative.::",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Availability:TECHNICAL IMPACT:DoS: Crash, Exit, or Restart DoS: Resource Consumption (CPU) DoS: Resource Consumption (Memory) DoS: Instability:NOTE:Availability DoS: Crash, Exit, or Restart DoS: Resource Consumption (CPU) DoS: Resource Consumption (Memory) DoS: Instability This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Memory:NOTE:Integrity Modify Memory If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.::SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:TECHNICAL IMPACT:Execute Unauthorized Code or Commands Bypass Protection Mechanism:NOTE:Confidentiality Availability Access Control Execute Unauthorized Code or Commands Bypass Protection Mechanism This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.::","","","::REFERENCE:CVE-2004-0816:DESCRIPTION:Integer underflow in firewall via malformed packet.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0816REFERENCE:CVE-2004-1002:DESCRIPTION:Integer underflow by packet with invalid length.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1002REFERENCE:CVE-2005-0199:DESCRIPTION:Long input causes incorrect length calculation.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0199REFERENCE:CVE-2005-1891:DESCRIPTION:Malformed icon causes integer underflow in loop counter variable.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1891","","","TAXONOMY NAME:PLOVER:ENTRY NAME:Integer underflow (wrap or wraparound)::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT30-C:ENTRY NAME:Ensure that unsigned integer operations do not wrap:MAPPING FIT:Imprecise::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT32-C:ENTRY NAME:Ensure that operations on signed integers do not result in overflow:MAPPING FIT:Imprecise::","","TYPE:Research Gap:NOTE:Under-studied.::",
192,"Integer Coercion Error",Class,Incomplete,"Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.","Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.","::NATURE:ChildOf:CWE ID:681:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Availability:TECHNICAL IMPACT:DoS: Resource Consumption (CPU) DoS: Resource Consumption (Memory) DoS: Crash, Exit, or Restart:NOTE:Availability DoS: Resource Consumption (CPU) DoS: Resource Consumption (Memory) DoS: Crash, Exit, or Restart Integer coercion often leads to undefined states of execution resulting in infinite loops or crashes.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Code or Commands:NOTE:Integrity Confidentiality Availability Execute Unauthorized Code or Commands In some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code.::SCOPE:Integrity:SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Integrity Other Other Integer coercion errors result in an incorrect value being stored for the variable in question.::","","::PHASE:Requirements:STRATEGY::EFFECTIVENESS::DESCRIPTION:A language which throws exceptions on ambiguous data casts might be chosen.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Design objects and program flow such that multiple or complex casts are unnecessary::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Integer coercion error::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT02-C:ENTRY NAME:Understand integer conversion rules::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT05-C:ENTRY NAME:Do not use input functions to convert character data if they cannot handle all possible inputs::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT31-C:ENTRY NAME:Ensure that integer conversions do not result in lost or misinterpreted data:MAPPING FIT:Exact::","","TYPE:Maintenance:NOTE:Within C, it might be that coercion is semantically different than casting, possibly depending on whether the programmer directly specifies the conversion, or if the compiler does it implicitly. This has implications for the presentation of this node and others, such as CWE-681, and whether there is enough of a difference for these nodes to be split.::",
197,"Numeric Truncation Error",Base,Incomplete,"Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.","When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.","::NATURE:ChildOf:CWE ID:681:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:681:VIEW ID:699:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:195:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:196:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:192:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:194:VIEW ID:1000::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Memory:NOTE:Integrity Modify Memory The true value of the data is lost and corrupted data is used.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.::","::REFERENCE:CVE-2009-0231:DESCRIPTION:Integer truncation of length value leads to heap-based buffer overflow.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0231REFERENCE:CVE-2008-3282:DESCRIPTION:Size of a particular type changes for 64-bit platforms, leading to an integer truncation in document processor causes incorrect index to be generated.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3282","","","TAXONOMY NAME:PLOVER:ENTRY NAME:Numeric truncation error::::TAXONOMY NAME:CLASP:ENTRY NAME:Truncation error::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO34-C:ENTRY NAME:Distinguish between characters read from a file and EOF or WEOF:MAPPING FIT:CWE More Abstract::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FLP34-C:ENTRY NAME:Ensure that floating point conversions are within range of the new type:MAPPING FIT:CWE More Abstract::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT02-C:ENTRY NAME:Understand integer conversion rules::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT05-C:ENTRY NAME:Do not use input functions to convert character data if they cannot handle all possible inputs::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT31-C:ENTRY NAME:Ensure that integer conversions do not result in lost or misinterpreted data:MAPPING FIT:CWE More Abstract::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:NUM12-J:ENTRY NAME:Ensure conversions of numeric types to narrower types do not result in lost or misinterpreted data::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::","","TYPE:Research Gap:NOTE:This weakness has traditionally been under-studied and under-reported, although vulnerabilities in popular software have been published in 2008 and 2009.::",
245,"J2EE Bad Practices: Direct Management of Connections",Variant,Draft,"The J2EE application directly manages connections, instead of using the container's connection management facilities.","The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.","::NATURE:ChildOf:CWE ID:695:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:695:VIEW ID:699:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Bad Practices: getConnection()::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
246,"J2EE Bad Practices: Direct Use of Sockets",Variant,Draft,"The J2EE application directly uses sockets instead of using framework method calls.","The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues. Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.","::NATURE:ChildOf:CWE ID:695:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:695:VIEW ID:699:ORDINAL:Primary::","::ORDINALITY:Resultant:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use framework method calls instead of using sockets directly.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Bad Practices: Sockets::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
248,"Uncaught Exception",Base,Draft,"An exception is thrown from a function, but it is not caught.","When an exception is not caught, it may cause the program to crash or expose sensitive information.","::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:703:VIEW ID:1000::","","::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Availability:SCOPE:Confidentiality:TECHNICAL IMPACT:DoS: Crash, Exit, or Restart Read Application Data:NOTE:Availability Confidentiality DoS: Crash, Exit, or Restart Read Application Data An uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors.::","","","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Often Misused: Exception Handling::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:ERR05-J:ENTRY NAME:Do not let checked exceptions escape from a finally block::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:ERR06-J:ENTRY NAME:Do not throw undeclared checked exceptions::::TAXONOMY NAME:CERT Perl Secure Coding:ENTRY ID:EXP31-PL:ENTRY NAME:Do not suppress or ignore exceptions:MAPPING FIT:Exact::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::","::54::","",
362,"Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",Class,Draft,"The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.","This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider. A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc. A race condition violates these properties, which are closely related: Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution. Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource. A race condition exists when an interfering code sequence can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single x++ statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x). The interfering code sequence could be trusted or untrusted. A trusted interfering code sequence occurs within the program; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable program.","::NATURE:ChildOf:CWE ID:691:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Sometimes:::LANGUAGE CLASS:Language-Independent:LANGUAGE PREVALENCE:Undetermined::PARADIGN NAME:Concurrent Systems Operating on Shared Resources:PARADIGN PREVALENCE:Often::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Availability:TECHNICAL IMPACT:DoS: Resource Consumption (CPU) DoS: Resource Consumption (Memory) DoS: Resource Consumption (Other):NOTE:Availability DoS: Resource Consumption (CPU) DoS: Resource Consumption (Memory) DoS: Resource Consumption (Other) When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).::SCOPE:Availability:TECHNICAL IMPACT:DoS: Crash, Exit, or Restart DoS: Instability:NOTE:Availability DoS: Crash, Exit, or Restart DoS: Instability When a race condition allows multiple control flows to access a resource simultaneously, it might lead the program(s) into unexpected states, possibly resulting in a crash.::SCOPE:Confidentiality:SCOPE:Integrity:TECHNICAL IMPACT:Read Files or Directories Read Application Data:NOTE:Confidentiality Integrity Read Files or Directories Read Application Data When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).::","::METHOD:Black Box:EFFECTIVENESS::DESCRIPTION:Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable.::METHOD:White Box:EFFECTIVENESS::DESCRIPTION:Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609).::METHOD:Automated Dynamic Analysis:EFFECTIVENESS:Moderate:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Race conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. Insert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.::METHOD:Automated Static Analysis - Binary or Bytecode:EFFECTIVENESS:High:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis::METHOD:Dynamic Analysis with Automated Results Interpretation:EFFECTIVENESS:SOAR Partial:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners::METHOD:Dynamic Analysis with Manual Results Interpretation:EFFECTIVENESS:High:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Framework-based Fuzzer Cost effective for partial coverage: Fuzz Tester Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious::METHOD:Manual Static Analysis - Source Code:EFFECTIVENESS:High:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source::METHOD:Automated Static Analysis - Source Code:EFFECTIVENESS:High:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer::METHOD:Architecture or Design Review:EFFECTIVENESS:High:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)::","::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use thread-safe capabilities such as the data access abstraction in Spring.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring. Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:When using multithreading and operating on shared variables, only use thread-safe functions.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use atomic operations on shared variables. Be wary of innocent-looking constructs such as x++. This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:EFFECTIVENESS::DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::","::REFERENCE:CVE-2008-5044:DESCRIPTION:Race condition leading to a crash by calling a hook removal procedure while other activities are occurring at the same time.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5044REFERENCE:CVE-2008-2958:DESCRIPTION:chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2958REFERENCE:CVE-2008-1570:DESCRIPTION:chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1570REFERENCE:CVE-2008-0058:DESCRIPTION:Unsynchronized caching operation enables a race condition that causes messages to be sent to a deallocated object.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0058REFERENCE:CVE-2008-0379:DESCRIPTION:Race condition during initialization triggers a buffer overflow.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0379REFERENCE:CVE-2007-6599:DESCRIPTION:Daemon crash by quickly performing operations and undoing them, which eventually leads to an operation that does not acquire a lock.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6599REFERENCE:CVE-2007-6180:DESCRIPTION:chain: race condition triggers NULL pointer dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6180REFERENCE:CVE-2007-5794:DESCRIPTION:Race condition in library function could cause data to be sent to the wrong process.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5794REFERENCE:CVE-2007-3970:DESCRIPTION:Race condition in file parser leads to heap corruption.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3970REFERENCE:CVE-2008-5021:DESCRIPTION:chain: race condition allows attacker to access an object while it is still being initialized, causing software to access uninitialized memory.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5021REFERENCE:CVE-2009-4895:DESCRIPTION:chain: race condition for an argument value, possibly resulting in NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4895REFERENCE:CVE-2009-3547:DESCRIPTION:chain: race condition might allow resource to be released before operating on it, leading to NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3547","","","TAXONOMY NAME:PLOVER:ENTRY NAME:Race Conditions::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:VNA03-J:ENTRY NAME:Do not assume that a group of calls to independently atomic methods is atomic::","::26::29::","TYPE:Maintenance:NOTE:The relationship between race conditions and synchronization problems (CWE-662) needs to be further developed. They are not necessarily two perspectives of the same core concept, since synchronization is only one technique for avoiding race conditions, and synchronization can be used for other purposes besides race condition prevention.::::TYPE:Research Gap:NOTE:Race conditions in web applications are under-studied and probably under-reported. However, in 2008 there has been growing interest in this area.::::TYPE:Research Gap:NOTE:Much of the focus of race condition research has been in Time-of-check Time-of-use (TOCTOU) variants (CWE-367), but many race conditions are related to synchronization problems that do not necessarily require a time-of-check.::::TYPE:Research Gap:NOTE:From a classification/taxonomy perspective, the relationships between concurrency and program state need closer investigation and may be useful in organizing related issues.::",
365,"Race Condition in Switch",Base,Draft,"The code contains a switch statement in which the switched variable can be modified while the switch is still executing, resulting in unexpected behavior.","This issue is particularly important in the case of switch statements that involve fall-through style case statements - ie., those which do not end with break. If the variable being tested by the switch changes in the course of execution, this could change the intended logic of the switch so much that it places the process in a contradictory state and in some cases could even result in memory corruption.","::NATURE:ChildOf:CWE ID:367:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:367:VIEW ID:699:ORDINAL:Primary::NATURE:PeerOf:CWE ID:364:VIEW ID:1000::NATURE:PeerOf:CWE ID:366:VIEW ID:1000::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Other:TECHNICAL IMPACT:Alter Execution Logic Unexpected State:NOTE:Integrity Other Alter Execution Logic Unexpected State This weakness may lead to unexpected system state, resulting in unpredictable behavior.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Variables that may be subject to race conditions should be locked before the switch statement starts and only unlocked after the statement ends.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Race condition in switch::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS35-C:ENTRY NAME:Avoid race conditions while checking for the existence of a symbolic link::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::","","",
366,"Race Condition within a Thread",Base,Draft,"If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.","","::NATURE:ChildOf:CWE ID:362:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:362:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Other:TECHNICAL IMPACT:Alter Execution Logic Unexpected State:NOTE:Integrity Other Alter Execution Logic Unexpected State The main problem is that -- if a lock is overcome -- data could be altered in a bad state.::","","::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Create resource-locking sanity checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.::","","","System Process::","TAXONOMY NAME:CLASP:ENTRY NAME:Race condition within a thread::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:CON32-C:ENTRY NAME:Prevent data races when accessing bit-fields from multiple threads:MAPPING FIT:CWE More Abstract::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:CON40-C:ENTRY NAME:Do not refer to an atomic variable twice in an expression:MAPPING FIT:CWE More Abstract::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:CON43-C:ENTRY NAME:Do not allow data races in multithreaded code:MAPPING FIT:Exact::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:VNA02-J:ENTRY NAME:Ensure that compound operations on shared variables are atomic::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:VNA03-J:ENTRY NAME:Do not assume that a group of calls to independently atomic methods is atomic::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::","::26::29::","",
374,"Passing Mutable Objects to an Untrusted Method",Base,Draft,"The program sends non-cloned mutable data as an argument to a method or function.","The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.","::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Memory:NOTE:Integrity Modify Memory Potentially data could be tampered with by another function which should not have been tampered with.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Pass in data which should not be altered as constant or immutable.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Passing mutable objects to an untrusted method::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ04-J:ENTRY NAME:Provide mutable classes with copy functionality to safely allow passing instances to untrusted code::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::","","",
375,"Returning a Mutable Object to an Untrusted Caller",Base,Draft,"Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.","In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.","::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Access Control:SCOPE:Integrity:TECHNICAL IMPACT:Modify Memory:NOTE:Access Control Integrity Modify Memory Potentially data could be tampered with by another function which should not have been tampered with.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Declare returned data which should not be altered as constant or immutable.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Mutable object returned::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ04-J:ENTRY NAME:Provide mutable classes with copy functionality to safely allow passing instances to untrusted code::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ05-J:ENTRY NAME:Defensively copy private mutable class members before returning their references::::TAXONOMY NAME:CERT Perl Secure Coding:ENTRY ID:EXP34-PL:ENTRY NAME:Do not modify $_ in list or sorting functions:MAPPING FIT:Imprecise::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::","","",
382,"J2EE Bad Practices: Use of System.exit()",Variant,Draft,"A J2EE application uses System.exit(), which also shuts down its container.","It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.","::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Availability:TECHNICAL IMPACT:DoS: Crash, Exit, or Restart::","","::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:EFFECTIVENESS::DESCRIPTION:The shutdown function should be a privileged function available only to a properly authorized administrative user::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Web applications should not call methods that cause the virtual machine to exit, such as System.exit()::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Web applications should also not throw any Throwables to the application server as this may adversely affect the container.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Bad Practices: System.exit()::::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:ERR09-J:ENTRY NAME:Do not allow untrusted code to terminate the JVM::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
383,"J2EE Bad Practices: Direct Use of Threads",Variant,Draft,"Thread management in a Web application is forbidden in some circumstances and is always highly error prone.","Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.","::NATURE:ChildOf:CWE ID:695:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:For EJB, use framework approaches for parallel execution, instead of using threads.::","","","System Process::","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Bad Practices: Threads::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
395,"Use of NullPointerException Catch to Detect NULL Pointer Dereference",Base,Draft,"Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.","Programmers typically catch NullPointerException under three circumstances: The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem. The program explicitly throws a NullPointerException to signal an error condition. The code is part of a test harness that supplies unexpected input to the classes under test. Of these three circumstances, only the last is acceptable.","::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:755:VIEW ID:1000::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Availability:TECHNICAL IMPACT:DoS: Resource Consumption (CPU)::","::METHOD:Automated Static Analysis - Binary or Bytecode:EFFECTIVENESS:SOAR Partial:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis::METHOD:Dynamic Analysis with Manual Results Interpretation:EFFECTIVENESS:SOAR Partial:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Framework-based Fuzzer::METHOD:Manual Static Analysis - Source Code:EFFECTIVENESS:SOAR Partial:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Manual Source Code Review (not inspections)::METHOD:Automated Static Analysis - Source Code:EFFECTIVENESS:High:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer::METHOD:Architecture or Design Review:EFFECTIVENESS:High:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)::","::PHASE:Architecture and Design Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Catching NullPointerException::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:ERR08-J:ENTRY NAME:Do not catch NullPointerException or any of its ancestors::","","",
396,"Declaration of Catch for Generic Exception",Base,Draft,"Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.","Multiple catch blocks can get ugly and repetitive, but condensing catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.","::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:755:VIEW ID:1000::NATURE:ChildOf:CWE ID:221:VIEW ID:1000::","","::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Non-Repudiation:SCOPE:Other:TECHNICAL IMPACT:Hide Activities Alter Execution Logic::","","","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Overly-Broad Catch Block::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP5:ENTRY NAME:Ambiguous Exception Type::","","",
397,"Declaration of Throws for Generic Exception",Base,Draft,"Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.","Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.","::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:221:VIEW ID:1000::NATURE:ChildOf:CWE ID:703:VIEW ID:1000::","","::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Non-Repudiation:SCOPE:Other:TECHNICAL IMPACT:Hide Activities Alter Execution Logic::","","","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Overly-Broad Throws Declaration::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:ERR07-J:ENTRY NAME:Do not throw RuntimeException, Exception, or Throwable::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP5:ENTRY NAME:Ambiguous Exception Type::","","",
460,"Improper Cleanup on Thrown Exception",Variant,Draft,"The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.","Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.","::NATURE:ChildOf:CWE ID:459:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:755:VIEW ID:1000::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Varies by Context:NOTE:Other Varies by Context The code could be left in a bad state.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Improper cleanup on thrown exception::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:ERR03-J:ENTRY NAME:Restore prior object state on method failure::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:ERR05-J:ENTRY NAME:Do not let checked exceptions escape from a finally block::::TAXONOMY NAME:CERT Perl Secure Coding:ENTRY ID:EXP31-PL:ENTRY NAME:Do not suppress or ignore exceptions:MAPPING FIT:Imprecise::","","",
462,"Duplicate Key in Associative List (Alist)",Base,Incomplete,"Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.","A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.","::NATURE:ChildOf:CWE ID:694:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation Varies by Context::","","::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use a hash table instead of an alist.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Duplicate key in associative list (alist)::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV02-C:ENTRY NAME:Beware of multiple environment variables with the same effective name::","","",
470,"Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",Base,Draft,"The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.","If the application uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the application to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the application's classpath (CWE-427) or add new entries to the application's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the application.","::NATURE:ChildOf:CWE ID:913:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined:::LANGUAGE CLASS:Interpreted:LANGUAGE PREVALENCE:Sometimes::","","::TERM:Reflection Injection:DESCRIPTION:::",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Other:TECHNICAL IMPACT:Execute Unauthorized Code or Commands Alter Execution Logic:NOTE:Integrity Confidentiality Availability Other Execute Unauthorized Code or Commands Alter Execution Logic The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.::SCOPE:Availability:SCOPE:Other:TECHNICAL IMPACT:DoS: Crash, Exit, or Restart Other:NOTE:Availability Other DoS: Crash, Exit, or Restart Other The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the application to exit or hang.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data:NOTE:Confidentiality Read Application Data By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.::","","::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Refactor your code to avoid using reflection.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not use user-controlled inputs to select and load classes or code.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Apply strict input validation by using whitelists or indirect selection to ensure that the user is only selecting allowable classes or code.::","::REFERENCE:CVE-2004-2331:DESCRIPTION:Database system allows attackers to bypass sandbox restrictions by using the Reflection APi.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2331","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Unsafe Reflection::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:SEC06-J:ENTRY NAME:Do not use reflection to increase accessibility of classes, methods, or fields::","","",
476,"NULL Pointer Dereference",Base,Draft,"A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.","NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.","::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::","::ORDINALITY:Resultant:DESCRIPTION:NULL pointer dereferences are frequently resultant from rarely encountered error conditions, since these are most likely to escape detection during the testing phases.::","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Availability:TECHNICAL IMPACT:DoS: Crash, Exit, or Restart:NOTE:Availability DoS: Crash, Exit, or Restart NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Code or Commands:NOTE:Integrity Confidentiality Availability Execute Unauthorized Code or Commands In very rare circumstances and environments, code execution is possible.::","::METHOD:Automated Dynamic Analysis:EFFECTIVENESS:Moderate:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.::METHOD:Manual Dynamic Analysis:EFFECTIVENESS::DESCRIPTION:Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.::","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.::PHASE:Requirements:STRATEGY::EFFECTIVENESS::DESCRIPTION:The choice could be made to use a language that is not susceptible to these issues.::PHASE:Implementation:STRATEGY::EFFECTIVENESS:Moderate:DESCRIPTION:Check the results of all functions that return a value and verify that the value is non-null before acting upon it.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.::PHASE:Testing:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.::","::REFERENCE:CVE-2005-3274:DESCRIPTION:race condition causes a table to be corrupted if a timer activates while it is being modified, leading to resultant NULL dereference; also involves locking.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3274REFERENCE:CVE-2002-1912:DESCRIPTION:large number of packets leads to NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1912REFERENCE:CVE-2005-0772:DESCRIPTION:packet with invalid error status value triggers NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0772REFERENCE:CVE-2009-4895:DESCRIPTION:chain: race condition for an argument value, possibly resulting in NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4895REFERENCE:CVE-2009-3547:DESCRIPTION:chain: race condition might allow resource to be released before operating on it, leading to NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3547REFERENCE:CVE-2009-3620:DESCRIPTION:chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3620REFERENCE:CVE-2009-2698:DESCRIPTION:chain: IP and UDP layers each track the same value with different mechanisms that can get out of sync, possibly resulting in a NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2698REFERENCE:CVE-2009-2692:DESCRIPTION:chain: uninitialized function pointers can be dereferenced allowing code execution:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2692REFERENCE:CVE-2009-0949:DESCRIPTION:chain: improper initialization of memory can lead to NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0949REFERENCE:CVE-2008-3597:DESCRIPTION:chain: game server can access player data structures before initialization has happened leading to NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3597REFERENCE:CVE-2008-5183:DESCRIPTION:chain: unchecked return value can lead to NULL dereference:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5183REFERENCE:CVE-2004-0079:DESCRIPTION:SSL software allows remote attackers to cause a denial of service (crash) via a crafted SSL/TLS handshake that triggers a null dereference.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0079REFERENCE:CVE-2004-0365:DESCRIPTION:Network monitor allows remote attackers to cause a denial of service (crash) via a malformed RADIUS packet that triggers a null dereference.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0365REFERENCE:CVE-2003-1013:DESCRIPTION:Network monitor allows remote attackers to cause a denial of service (crash) via a malformed Q.931, which triggers a null dereference.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1013REFERENCE:CVE-2003-1000:DESCRIPTION:Chat client allows remote attackers to cause a denial of service (crash) via a passive DCC request with an invalid ID number, which causes a null dereference.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1000REFERENCE:CVE-2004-0389:DESCRIPTION:Server allows remote attackers to cause a denial of service (crash) via malformed requests that trigger a null dereference.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0389REFERENCE:CVE-2004-0119:DESCRIPTION:OS allows remote attackers to cause a denial of service (crash from null dereference) or execute arbitrary code via a crafted request during authentication protocol selection.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0119REFERENCE:CVE-2004-0458:DESCRIPTION:Game allows remote attackers to cause a denial of service (server crash) via a missing argument, which triggers a null pointer dereference.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0458REFERENCE:CVE-2002-0401:DESCRIPTION:Network monitor allows remote attackers to cause a denial of service (crash) or execute arbitrary code via malformed packets that cause a NULL pointer dereference.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0401","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Null Dereference::::TAXONOMY NAME:CLASP:ENTRY NAME:Null-pointer dereference::::TAXONOMY NAME:PLOVER:ENTRY NAME:Null Dereference (Null Pointer Dereference)::::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP34-C:ENTRY NAME:Do not dereference null pointers:MAPPING FIT:Exact::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP7:ENTRY NAME:Faulty Pointer Use::","","",
478,"Missing Default Case in Switch Statement",Variant,Draft,"The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses.","This flaw represents a common problem in software development, in which not all possible values for a variable are considered or handled by a given process. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.","::NATURE:ChildOf:CWE ID:1023:VIEW ID:1000:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Varies by Context Alter Execution Logic:NOTE:Integrity Varies by Context Alter Execution Logic Depending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Ensure that there are no unaccounted for cases, when adjusting flow or values based on the value of a given variable. In switch statements, this can be accomplished through the use of the default label.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:In the case of switch style statements, the very simple act of creating a default case can mitigate this situation, if done correctly. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Failure to account for default case in switch::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::","","",
481,"Assigning instead of Comparing",Variant,Draft,"The code uses an operator for assignment when the intention was to perform a comparison.","In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.","::NATURE:ChildOf:CWE ID:480:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:480:VIEW ID:699:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:697:VIEW ID:1000::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Alter Execution Logic::","","::PHASE:Testing:STRATEGY::EFFECTIVENESS::DESCRIPTION:Many IDEs and static analysis products will detect this problem.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Place constants on the left. If one attempts to assign a constant with a variable, the compiler will of course produce an error.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Assigning instead of comparing::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP45-C:ENTRY NAME:Do not perform assignments in selection statements:MAPPING FIT:CWE More Abstract::","","",
484,"Omitted Break Statement in Switch",Base,Draft,"The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.","This can lead to critical code executing in situations where it should not.","::NATURE:ChildOf:CWE ID:710:VIEW ID:1000::NATURE:ChildOf:CWE ID:670:VIEW ID:1000:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Alter Execution Logic:NOTE:Other Alter Execution Logic This weakness can cause unintended logic to be executed and other unexpected application behavior.::","::METHOD:White Box:EFFECTIVENESS::DESCRIPTION:Omission of a break statement might be intentional, in order to support fallthrough. Automated detection methods might therefore be erroneous. Semantic understanding of expected program behavior is required to interpret whether the code is correct.::METHOD:Black Box:EFFECTIVENESS::DESCRIPTION:Since this weakness is associated with a code construct, it would be indistinguishable from other errors that produce the same behavior.::","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Omitted break statement::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::","","",
486,"Comparison of Classes by Name",Variant,Draft,"The program compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.","If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types.","::NATURE:ChildOf:CWE ID:1025:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Code or Commands:NOTE:Integrity Confidentiality Availability Execute Unauthorized Code or Commands If a program relies solely on the name of an object to determine identity, it may execute the incorrect or unintended code.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Comparing Classes by Name::::TAXONOMY NAME:CLASP:ENTRY NAME:Comparing classes by name::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ09-J:ENTRY NAME:Compare classes and not class names::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::","","",
487,"Reliance on Package-level Scope",Variant,Incomplete,"Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.","The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.","::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data:NOTE:Confidentiality Read Application Data Any data in a Java package can be accessed outside of the Java framework if the package is distributed.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data:NOTE:Integrity Modify Application Data The data in a Java class can be modified by anyone outside of the Java framework if the packages is distributed.::","","::PHASE:Architecture and Design Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Relying on package-level scope::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:MET04-J:ENTRY NAME:Do not increase the accessibility of overridden or hidden methods::","","",
491,"Public cloneable() Method Without Final ('Object Hijack')",Variant,Draft,"A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.","","::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Other:TECHNICAL IMPACT:Unexpected State Varies by Context::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Make the cloneable() method final.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Mobile Code: Object Hijack::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ07-J:ENTRY NAME:Sensitive classes must not let themselves be copied::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::","","",
492,"Use of Inner Class Containing Sensitive Data",Variant,Draft,"Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.","Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in their enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.","::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data:NOTE:Confidentiality Read Application Data Inner Classes data confidentiality aspects can often be overcome.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Mobile Code: Use of Inner Class::::TAXONOMY NAME:CLASP:ENTRY NAME:Publicizing of private data when using inner classes::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ08-J:ENTRY NAME:Do not expose private members of an outer class from within a nested class::","","TYPE:Other:NOTE:Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.::",
493,"Critical Public Variable Without Final Modifier",Variant,Draft,"The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.","If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field.","::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:216:VIEW ID:1000::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::","::Mobile code, such as a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.::Final provides security by only allowing non-mutable objects to be changed after being set. However, only objects which are not extended can be made final.::","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data:NOTE:Integrity Modify Application Data The object could potentially be tampered with.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data:NOTE:Confidentiality Read Application Data The object could potentially allow the object to be read.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Mobile Code: Non-Final Public Field::::TAXONOMY NAME:CLASP:ENTRY NAME:Failure to provide confidentiality for stored data::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ10-J:ENTRY NAME:Do not use public static nonfinal variables::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::","","",
495,"Private Array-Typed Field Returned From A Public Method",Variant,Draft,"The product has a method that is declared public, but returns a reference to a private array, which could then be modified in unexpected ways.","","::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data:NOTE:Integrity Modify Application Data The contents of the array can be modified from outside the intended scope.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Declare the method private.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Clone the member data and keep an unmodified version of the data private to the object.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use public setter methods that govern how a member can be modified.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Private Array-Typed Field Returned From A Public Method::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::","","",
496,"Public Data Assigned to Private Array-Typed Field",Variant,Incomplete,"Assigning public data to a private array is equivalent to giving public access to the array.","","::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data:NOTE:Integrity Modify Application Data The contents of the array can be modified from outside the intended scope.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not allow objects to modify private members of a class.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Public Data Assigned to Private Array-Typed Field::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::","","",
498,"Cloneable Class Containing Sensitive Information",Variant,Draft,"The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.","Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.","::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:200:VIEW ID:1000::NATURE:CanPrecede:CWE ID:200:VIEW ID:699::","","::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism:NOTE:Access Control Bypass Protection Mechanism A class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:If you do make your classes clonable, ensure that your clone method is final and throw super.clone().::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Information leak through class cloning::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ07-J:ENTRY NAME:Sensitive classes must not let themselves be copied::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::","","",
499,"Serializable Class Containing Sensitive Data",Variant,Draft,"The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.","Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.","::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:200:VIEW ID:1000::NATURE:CanPrecede:CWE ID:200:VIEW ID:699::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data:NOTE:Confidentiality Read Application Data an attacker can write out the class to a byte stream, then extract the important data from it.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Make sure to prevent serialization of your objects.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Information leak through serialization::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:SER03-J:ENTRY NAME:Do not serialize unencrypted, sensitive data::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:SER05-J:ENTRY NAME:Do not serialize instances of inner classes::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::","","",
5,"J2EE Misconfiguration: Data Transmission Without Encryption",Variant,Draft,"Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.","","::NATURE:ChildOf:CWE ID:319:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION::::PHASE:Operation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data::","","::PHASE:System Configuration:STRATEGY::EFFECTIVENESS::DESCRIPTION:The application configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Insecure Transport::","","TYPE:Other:NOTE:If an application uses SSL to guarantee confidential communication with client browsers, the application configuration should make it impossible to view any access controlled page without SSL. There are three common ways for SSL to be bypassed: A user manually enters URL and types HTTP rather than HTTPS. Attackers intentionally send a user to an insecure URL. A programmer erroneously creates a relative link to a page in the application, which does not switch from HTTP to HTTPS. (This is particularly easy to do when the link moves between public and secured areas on a web site.)::",
500,"Public Static Field Not Marked Final",Variant,Draft,"An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.","Public static variables can be read without an accessor and changed without a mutator by any classes in the application.","::NATURE:ChildOf:CWE ID:493:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:493:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","::When a field is declared public but not final, the field can be read and written to by arbitrary Java code.::","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data:NOTE:Integrity Modify Application Data The object could potentially be tampered with.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data:NOTE:Confidentiality Read Application Data The object could potentially allow the object to be read.::","","::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Clearly identify the scope for all critical data elements, including whether they should be regarded as static.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Overflow of static internal buffer::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ10-J:ENTRY NAME:Do not use public static nonfinal variables::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::","","",
502,"Deserialization of Untrusted Data",Variant,Draft,"The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.","It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption. Data that is untrusted can not be trusted to be well-formed. When developers place no restrictions on gadget chains, or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.","::NATURE:ChildOf:CWE ID:913:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:913:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:913:VIEW ID:1003:ORDINAL:Primary::NATURE:PeerOf:CWE ID:915:VIEW ID:1000::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Ruby:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Python:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:JavaScript:LANGUAGE PREVALENCE:Undetermined::","::Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred (serialization), then extracting the serialized data to reconstruct the original object (deserialization).::","::TERM:Marshaling, Unmarshaling:DESCRIPTION:Marshaling and unmarshaling are effectively synonyms for serialization and deserialization, respectively.::TERM:Pickling, Unpickling:DESCRIPTION:In Python, the pickle functionality is used to perform serialization and deserialization.::",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data Unexpected State:NOTE:Integrity Modify Application Data Unexpected State Attackers can modify unexpected objects or data that was assumed to be safe from modification.::SCOPE:Availability:TECHNICAL IMPACT:DoS: Resource Consumption (CPU):NOTE:Availability DoS: Resource Consumption (CPU) If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.::SCOPE:Other:TECHNICAL IMPACT:Varies by Context:NOTE:Other Varies by Context The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation.::","","::PHASE:Architecture and Design Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Explicitly define a final object() to prevent deserialization.::PHASE:Architecture and Design Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Make fields transient to protect them from deserialization. An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Whitelist acceptable classes. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.::","::REFERENCE:CVE-2015-8103:DESCRIPTION:Deserialization issue in commonly-used Java library allows remote execution.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-8103REFERENCE:CVE-2015-4852:DESCRIPTION:Deserialization issue in commonly-used Java library allows remote execution.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-4852REFERENCE:CVE-2013-1465:DESCRIPTION:Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1465REFERENCE:CVE-2012-3527:DESCRIPTION:Use of PHP unserialize function on untrusted input in content management system might allow code execution.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3527REFERENCE:CVE-2012-0911:DESCRIPTION:Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0911REFERENCE:CVE-2012-0911:DESCRIPTION:Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0911REFERENCE:CVE-2011-2520:DESCRIPTION:Python script allows local users to execute code via pickled data.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2520REFERENCE:CVE-2012-4406:DESCRIPTION:Unsafe deserialization using pickle in a Python script.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4406REFERENCE:CVE-2003-0791:DESCRIPTION:Web browser allows execution of native methods via a crafted string to a JavaScript function that deserializes the string.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0791","","","TAXONOMY NAME:CLASP:ENTRY NAME:Deserialization of untrusted data::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:SER01-J:ENTRY NAME:Do not deviate from the proper signatures of serialization methods::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:SER03-J:ENTRY NAME:Do not serialize unencrypted, sensitive data::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:SER06-J:ENTRY NAME:Make defensive copies of private mutable components during deserialization::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:SER08-J:ENTRY NAME:Do not use the default serialized form for implementation defined invariants::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::","","TYPE:Maintenance:NOTE:The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization.::",
537,"Information Exposure Through Java Runtime Error Message",Variant,Incomplete,"In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.","","::NATURE:ChildOf:CWE ID:210:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:210:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not expose sensitive error information to the user.::","","","","","","",
543,"Use of Singleton Pattern Without Synchronization in a Multithreaded Context",Variant,Incomplete,"The software uses the singleton pattern when creating a resource within a multithreaded environment.","The use of a singleton pattern may not be thread-safe.","::NATURE:ChildOf:CWE ID:820:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:820:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:SCOPE:Integrity:TECHNICAL IMPACT:Other Modify Application Data::","","::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use the Thread-Specific Storage Pattern. See References.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.::PHASE:Implementation:STRATEGY::EFFECTIVENESS:Limited:DESCRIPTION:Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).::","","","","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:MSC07-J:ENTRY NAME:Prevent multiple instantiations of singleton objects::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::","","",
567,"Unsynchronized Access to Shared Data in a Multithreaded Context",Base,Draft,"The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.","Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable. Note that this weakness is not unique to servlets.","::NATURE:ChildOf:CWE ID:820:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:488:VIEW ID:1000::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Read Application Data Modify Application Data DoS: Instability DoS: Crash, Exit, or Restart:NOTE:Confidentiality Integrity Availability Read Application Data Modify Application Data DoS: Instability DoS: Crash, Exit, or Restart If the shared variable contains sensitive data, it may be manipulated or displayed in another user session. If this data is used to control the application, its value can be manipulated to cause the application to crash or perform poorly.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.::","","","","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:VNA00-J:ENTRY NAME:Ensure visibility when accessing shared primitive variables::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:VNA02-J:ENTRY NAME:Ensure that compound operations on shared variables are atomic::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::","::25::","",
568,"finalize() Method Without super.finalize()",Variant,Draft,"The software contains a finalize() method that does not call super.finalize().","The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().","::NATURE:ChildOf:CWE ID:573:VIEW ID:1000::NATURE:ChildOf:CWE ID:459:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Call the super.finalize() method.::PHASE:Testing:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use static analysis tools to spot such issues in your code.::","","","","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:MET12-J:ENTRY NAME:Do not use finalizers::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::","","",
572,"Call to Thread run() instead of start()",Variant,Draft,"The program calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.","In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.","::NATURE:ChildOf:CWE ID:821:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:821:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation Varies by Context::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use the start() method instead of the run() method.::","","","System Process::","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:THI00-J:ENTRY NAME:Do not invoke Thread.run()::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
574,"EJB Bad Practices: Use of Synchronization Primitives",Variant,Draft,"The program violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.","The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances. The specification justifies this requirement in the following way: This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.","::NATURE:ChildOf:CWE ID:695:VIEW ID:1000::NATURE:ChildOf:CWE ID:695:VIEW ID:699::NATURE:ChildOf:CWE ID:821:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:821:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not use Synchronization Primitives when writing EJBs.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
575,"EJB Bad Practices: Use of AWT Swing",Variant,Draft,"The program violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.","The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard. The specification justifies this requirement in the following way: Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system.","::NATURE:ChildOf:CWE ID:695:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:695:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not use AWT/Swing when writing EJBs.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
576,"EJB Bad Practices: Use of Java I/O",Variant,Draft,"The program violates the Enterprise JavaBeans (EJB) specification by using the java.io package.","The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not use the java.io package to attempt to access files and directories in the file system. The specification justifies this requirement in the following way: The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data.","::NATURE:ChildOf:CWE ID:695:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:695:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not use Java I/O when writing EJBs.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
577,"EJB Bad Practices: Use of Sockets",Variant,Draft,"The program violates the Enterprise JavaBeans (EJB) specification by using sockets.","The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast. The specification justifies this requirement in the following way: The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.","::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:573:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","::PHASE:Architecture and Design Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not use Sockets when writing EJBs.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
578,"EJB Bad Practices: Use of Class Loader",Variant,Draft,"The program violates the Enterprise JavaBeans (EJB) specification by using the class loader.","The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams. The specification justifies this requirement in the following way: These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment.","::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:573:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:TECHNICAL IMPACT:Execute Unauthorized Code or Commands Varies by Context::","","::PHASE:Architecture and Design Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not use the Class Loader when writing EJBs.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
579,"J2EE Bad Practices: Non-serializable Object Stored in Session",Variant,Draft,"The application stores a non-serializable object as an HttpSession attribute, which can hurt reliability.","A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.","::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:573:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Quality Degradation::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:In order for session replication to work, the values the application stores as attributes in the session must implement the Serializable interface.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::","","",
580,"clone() Method Without super.clone()",Variant,Draft,"The software contains a clone() method that does not call super.clone() to obtain the new object.","All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.","::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:573:VIEW ID:1000::NATURE:ChildOf:CWE ID:573:VIEW ID:699::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Other:TECHNICAL IMPACT:Unexpected State Quality Degradation::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Call super.clone() within your clone() method, when obtaining a new object.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:In some cases, you can eliminate the clone method altogether and use copy constructors.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::","","",
581,"Object Model Violation: Just One of Equals and Hashcode Defined",Base,Draft,"The software does not maintain equal hashcodes for equal objects.","Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().","::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:697:VIEW ID:1000::NATURE:ChildOf:CWE ID:573:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Integrity Other Other If this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Both Equals() and Hashcode() should be defined.::","","","","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:MET09-J:ENTRY NAME:Classes that define an equals() method must also define a hashCode() method::","","",
582,"Array Declared Public, Final, and Static",Variant,Draft,"The program declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.","Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.","::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","::Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.::","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:In most situations the array should be made private.::","","","","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ10-J:ENTRY NAME:Do not use public static nonfinal variables::","","",
583,"finalize() Method Declared Public",Variant,Incomplete,"The program violates secure coding principles for mobile code by declaring a finalize() method public.","A program should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke one of your finalize() methods because it is declared with public access.","::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Alter Execution Logic Execute Unauthorized Code or Commands Modify Application Data::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.::","","","","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:MET12-J:ENTRY NAME:Do not use finalizers::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::","","",
585,"Empty Synchronized Block",Variant,Draft,"The software contains an empty synchronized block.","An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.","::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Other Other An empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP21:ENTRY NAME:Multiple locks/unlocks::","","",
586,"Explicit Call to Finalize()",Variant,Draft,"The software makes an explicit call to the finalize() method from outside the finalizer.","While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.","::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Other:TECHNICAL IMPACT:Unexpected State Quality Degradation::","","::PHASE:Implementation Testing:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.::","","","","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:MET12-J:ENTRY NAME:Do not use finalizers::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::","","",
594,"J2EE Framework: Saving Unserializable Objects to Disk",Variant,Incomplete,"When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.","In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.","::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data:NOTE:Integrity Modify Application Data Data represented by unserializable objects can be corrupted.::SCOPE:Availability:TECHNICAL IMPACT:DoS: Crash, Exit, or Restart:NOTE:Availability DoS: Crash, Exit, or Restart Non-serializability of objects can lead to system crash.::","","::PHASE:Architecture and Design Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::","","",
595,"Comparison of Object References Instead of Object Contents",Variant,Incomplete,"The program compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.","For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.","::NATURE:ChildOf:CWE ID:1025:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:JavaScript:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined:::LANGUAGE CLASS:Language-Independent:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Other:TECHNICAL IMPACT:Varies by Context:NOTE:Other Varies by Context This weakness can lead to erroneous results that can cause unexpected application behaviors.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.::","","","","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:EXP02-J:ENTRY NAME:Use the two-argument Arrays.equals() method to compare the contents of arrays::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:EXP02-J:ENTRY NAME:Use the two-argument Arrays.equals() method to compare the contents of arrays::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:EXP03-J:ENTRY NAME:Do not use the equality operators when comparing values of boxed primitives::","","",
6,"J2EE Misconfiguration: Insufficient Session-ID Length",Variant,Incomplete,"The J2EE application is configured to use an insufficient session ID length.","If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.","::NATURE:ChildOf:CWE ID:334:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","::Session ID's can be used to identify communicating parties in a web environment. The expected number of seconds required to guess a valid session identifier is given by the equation: (2^B+1)/(2*A*S) Where: - B is the number of bits of entropy in the session identifier. - A is the number of guesses an attacker can try each second. - S is the number of valid session identifiers that are valid and available to be guessed at any given time. The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic.::","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges or Assume Identity:NOTE:Access Control Gain Privileges or Assume Identity If an attacker can guess an authenticated user's session identifier, they can take over the user's session.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Insufficient Session-ID Length::","::21::59::","",
607,"Public Static Final Field References Mutable Object",Variant,Draft,"A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.","","::NATURE:ChildOf:CWE ID:471:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:471:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Application Data::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Protect mutable objects by making them private. Restrict access to the getter and setter as well.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::","","",
608,"Struts: Non-private Field in ActionForm Class",Variant,Draft,"An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.","","::NATURE:ChildOf:CWE ID:20:VIEW ID:699:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Modify Application Data Read Application Data::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.::","","","","TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::","","",
609,"Double-Checked Locking",Base,Draft,"The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.","Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.","::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:367:VIEW ID:1000::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Other:TECHNICAL IMPACT:Modify Application Data Alter Execution Logic::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the volatile keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.::","","","","TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:LCK10-J:ENTRY NAME:Do not use incorrect forms of the double-checked locking idiom::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::","","",
7,"J2EE Misconfiguration: Missing Custom Error Page",Variant,Incomplete,"The default error page of a web application should not display sensitive information about the software system.","A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response. When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.","::NATURE:ChildOf:CWE ID:756:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:756:VIEW ID:699:ORDINAL:Primary::","","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data:NOTE:Confidentiality Read Application Data A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Handle exceptions appropriately in source code.::PHASE:Implementation System Configuration:STRATEGY::EFFECTIVENESS::DESCRIPTION:Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not attempt to process an error or attempt to mask it.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Verify return values are correct and do not supply sensitive information about the system.::","","","","TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Missing Error Handling::","","",
766,"Critical Variable Declared Public",Variant,Incomplete,"The software declares a critical variable or field to be public when intended security policy requires it to be private.","","::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data Modify Application Data:NOTE:Integrity Confidentiality Read Application Data Modify Application Data Making a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value.::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.::","::REFERENCE:CVE-2010-3860:DESCRIPTION:variables declared public allows remote read of system properties such as user name and home directory.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3860","","","TAXONOMY NAME:CLASP:ENTRY NAME:Failure to protect stored data from modification::::TAXONOMY NAME:CERT Java Secure Coding:ENTRY ID:OBJ01-J:ENTRY NAME:Declare data members as private and provide accessible wrapper methods::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::","","",
767,"Access to Critical Private Variable via Public Method",Variant,Incomplete,"The software defines a public method that reads or modifies a private variable.","If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.","::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::","","::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Integrity:SCOPE:Other:TECHNICAL IMPACT:Modify Application Data Other::","","::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.::","","","","TAXONOMY NAME:CLASP:ENTRY NAME:Failure to protect stored data from modification::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::::TAXONOMY NAME:CERT Perl Secure Coding:ENTRY ID:OOP31-PL:ENTRY NAME:Do not access private variables or subroutines in other packages:MAPPING FIT:Imprecise::","","TYPE:Maintenance:NOTE:This entry is closely associated with access control for public methods. If the public methods are restricted with proper access controls, then the information in the private variable will not be exposed to unexpected parties. There may be chaining or composite relationships between improper access controls and this weakness.::",
917,"Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",Base,Incomplete,"The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.","","::NATURE:ChildOf:CWE ID:77:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:699:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::","","::TERM:EL Injection:DESCRIPTION:::",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Application Data::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Code or Commands::","","","","","","","","TYPE:Relationship:NOTE:In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.::",
95,"Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",Base,Incomplete,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. eval).","This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.","::NATURE:ChildOf:CWE ID:94:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:94:VIEW ID:699:ORDINAL:Primary::","::ORDINALITY:Primary:DESCRIPTION:::","::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:JavaScript:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Python:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Perl:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Ruby:LANGUAGE PREVALENCE:Undetermined:::LANGUAGE CLASS:Interpreted:LANGUAGE PREVALENCE:Undetermined::","","",":::PHASE:Architecture and Design:DESCRIPTION::::PHASE:Implementation:DESCRIPTION:::","",,"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Files or Directories Read Application Data:NOTE:Confidentiality Read Files or Directories Read Application Data The injected code could access restricted data / files.::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism:NOTE:Access Control Bypass Protection Mechanism In some cases, injectable code controls authentication; this may lead to a remote vulnerability.::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges or Assume Identity:NOTE:Access Control Gain Privileges or Assume Identity Injected code can access resources that the attacker is directly prevented from accessing.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Other:TECHNICAL IMPACT:Execute Unauthorized Code or Commands:NOTE:Integrity Confidentiality Availability Other Execute Unauthorized Code or Commands Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.::SCOPE:Non-Repudiation:TECHNICAL IMPACT:Hide Activities:NOTE:Non-Repudiation Hide Activities Often the actions performed by injected control code are unlogged.::","","::PHASE:Architecture and Design Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:If possible, refactor your code so that it does not need to use eval() at all.::PHASE:Implementation:STRATEGY:Input Validation:EFFECTIVENESS::DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.::","::REFERENCE:CVE-2008-5071:DESCRIPTION:Eval injection in PHP program.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5071REFERENCE:CVE-2002-1750:DESCRIPTION:Eval injection in Perl program.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1750REFERENCE:CVE-2008-5305:DESCRIPTION:Eval injection in Perl program using an ID that should only contain hyphens and numbers.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305REFERENCE:CVE-2002-1752:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1752REFERENCE:CVE-2002-1753:DESCRIPTION:Eval injection in Perl program.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1753REFERENCE:CVE-2005-1527:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1527REFERENCE:CVE-2005-2837:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2837REFERENCE:CVE-2005-1921:DESCRIPTION:MFV. code injection into PHP eval statement using nested constructs that should not be nested.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1921REFERENCE:CVE-2005-2498:DESCRIPTION:MFV. code injection into PHP eval statement using nested constructs that should not be nested.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2498REFERENCE:CVE-2005-3302:DESCRIPTION:Code injection into Python eval statement from a field in a formatted file.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3302REFERENCE:CVE-2007-1253:DESCRIPTION:Eval injection in Python program.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1253REFERENCE:CVE-2001-1471:DESCRIPTION:chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1471REFERENCE:CVE-2007-2713:DESCRIPTION:Chain: Execution after redirect triggers eval injection.:LINK:https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2713","","","TAXONOMY NAME:PLOVER:ENTRY NAME:Direct Dynamic Code Evaluation ('Eval Injection')::::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A3:ENTRY NAME:Malicious File Execution:MAPPING FIT:CWE More Specific::::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::::TAXONOMY NAME:CERT Perl Secure Coding:ENTRY ID:IDS35-PL:ENTRY NAME:Do not invoke the eval form with a string argument:MAPPING FIT:Exact::","::35::","TYPE:Other:NOTE:Factors: special character errors can play a role in increasing the variety of code that can be injected, although some vulnerabilities do not require special characters at all, e.g. when a single function without arguments can be referenced and a terminator character is not necessary.::::TYPE:Research Gap:NOTE:This issue is probably under-reported. Most relevant CVEs have been for Perl and PHP, but eval injection applies to most interpreted languages. Javascript eval injection is likely to be heavily under-reported.::",
