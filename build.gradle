buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		//classpath 'org.asciidoctor:asciidoctorj-diagram:1.5.4.1'
		classpath 'net.saliman:gradle-cobertura-plugin:3.0.0'
	}
}

import java.nio.file.Files
import java.text.SimpleDateFormat
import groovy.io.FileType
import java.nio.file.Paths
import com.google.common.hash.Hasher
import com.google.common.hash.Hashing

plugins {
	id 'com.google.cloud.tools.jib' version '1.5.0'
	id "com.diffplug.gradle.spotless" version "3.28.1"
	//id 'org.jbake.site' version '1.4.0'
}
apply plugin: "java"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "net.saliman.cobertura"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = groupName
version = versionNumber

/*
task writeNewPom {
	pom {
		project {
			groupId groupName
			artifactId projectName
			version version

			inceptionYear '2018'

			licenses {
				license {
					name = 'The GNU General Public, License v3.0'
					url = 'http://www.gnu.org/licenses/gpl-3.0.txt'
				}
			}

			developers {
				developer {
					id = 'franceme'
					name = 'Miles Frantz'
					url = 'https://franceme.github.io'
				}
				developer {
					id = 'franceme'
					name = 'Sazzadur Rahamen'
					url = 'https://sazzadur.com'
				}
			}
		}
	}.whenConfigured {
		pom -> pom.dependencies.find {
			dep -> dep.groupId == 'junit'
		}
	}.writeTo("$buildDir/newpom.xml")
}
*/

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/franceme/cryptoguard")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
				password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
			}
		}
	}
	publications {
		gpr(MavenPublication) {
			from(components.java)
		}
		maven(MavenPublication) {
			group
		}
	}
}
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = groupName
version = versionNumber

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'src/main/resources'
		}
	}
	test {
		java {
			srcDir 'src/test/java'
		}
		resources {
			srcDir 'src/main/resources'
		}
	}
}

task updateVersion {
	Properties props = new Properties()
	InputStream ins = new FileInputStream(file("gradle.properties"))
	props.load(ins)

	ant.replaceregexp(
			match: 'V[0-9]{2}[.][0-9]{2}[.][0-9]{2}',
			replace: props.getProperty("versionNumber"),
			flags: 'g',
			byline: true) {

		fileset(
				dir: '.',
				includes: 'README.rst'
		)
		fileset(
				dir: '.',
				includes: 'Makefile'
		)
		fileset(
				dir: 'src/main/java/util',
				includes: 'Utils.java'
		)
	}

	ant.replace(
			dir: 'src/main/java/',
			token: '@VERSION@',
			value: props.getProperty("versionNumber").replace("V", "")
	)

	ant.replace(
			dir: 'src/main/java/',
			token: '@version $Id: $Id',
			value: '@version ' + props.getProperty("versionNumber").replace("V", "")
	)
}

task updateCopyRightYear {
	Properties props = new Properties()
	InputStream ins = new FileInputStream(file("gradle.properties"))
	props.load(ins)

	SimpleDateFormat year = new SimpleDateFormat("yyyy")

	ant.replaceregexp(
			match: 'Copyright © [0-9]{4} CryptoGuard',
			replace: 'Copyright © ' + year.format(new Date()) + ' CryptoGuard',
			flags: 'g',
			byline: true) {

		fileset(
				dir: '.',
				includes: '*.rst'
		)
	}
}

build.dependsOn(updateVersion)
build.dependsOn(updateCopyRightYear)

repositories {
	mavenCentral()
	flatDir {
		dirs 'libs'
	}
}

configurations.all {
	resolutionStrategy {
		// fail eagerly on version conflict (includes transitive dependencies)
		// e.g. multiple different versions of the same dependency (group and name are equal)
		failOnVersionConflict()

		force "commons-io:commons-io:2.6"
		force "org.apache.commons:commons-lang3:3.4"
		force "junit:junit:4.13"
	}
}

jar {
	setBaseName(projectName)
	setVersion(versionNumber)
	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
	manifest {
		attributes(
				'Main-Class': 'frontEnd.Interface.EntryPoint'
		)
	}
}

java {
	//withJavadocJar()
	//withSourcesJar()
}

javadoc {
	source = sourceSets.main.allJava
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
	destinationDir = new File('manual/javadoc')
}

//Ensuring all of the processors are being used for tests
test {
	environment "ANDROID_HOME", System.getenv("ANDROID_HOME") ?: "ANDROIDSDK"
	environment "JAVA_HOME", System.getenv("JAVA_HOME") ?: "JAVA8SDK"
	environment "JAVA7_HOME", System.getenv("JAVA7_HOME") ?: "JAVA7SDK"
}
//A Task for specifying explicit release commands
task release {

	doFirst {
		delete './release'
		mkdir './release'
	}
	//Waiting until all tests are cleared
	def tasks = [jibBuildTar]
	for (int itr = 0; itr < tasks.size() - 1; itr++) {
		tasks[itr + 1].mustRunAfter(tasks[itr])
	}

	//This task calls the previous tasks in order
	dependsOn(tasks)

	//This will now move the built jar to the current directory under the new name
	doLast {
		Properties props = new Properties()
		InputStream ins = new FileInputStream(file("gradle.properties"))
		props.load(ins)

		copy {
			from "build/jib-image.tar"
			into './release'
			rename {
				String fileName -> props.getProperty("projectName") + ".tar"
			}
		}

		copy {
			from "build/libs/" + props.getProperty("projectName") + "-" + props.getProperty("versionNumber") + ".jar"
			into './release'
			rename {
				String fileName -> props.getProperty("projectName") + ".jar"
			}
		}

		ins.close()

		//region Writing the hashes of all of the files in the release folder
		def hashDictionary = [:]
		new File('./release').eachFileRecurse(FileType.FILES) {
			file ->
				Hasher hasher = Hashing.sha512().newHasher()
				hasher.putBytes(Files.readAllBytes(Paths.get(file.getPath())))
				hashDictionary[file.name] = hasher.hash().toString()

		}

		File hash = new File('./release/sha512.sums')
		hashDictionary.each {
			k, v ->
				hash.append(v + '  ' + k + '\n')
		}
		//endregion

	}
}

spotless {
	encoding 'UTF-8'
	format 'misc', {
		target '*.gradle', '*.md', '.gitignore', '.gitattributes', '*.rst', '*.txt'

		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	freshmark {
		//target 'README.md'
		//propertiesFile('gradle.properties')
		//properties {
		//it.put('key','value')
		//}
	}
	java {
		licenseHeader '/* Licensed under GPL-3.0 */'
		importOrder 'java', 'javax', 'org', 'com', ''

		trimTrailingWhitespace()
		//indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
		removeUnusedImports()

		googleJavaFormat('1.1')
	}
	format 'xml', {
		target fileTree('.') {
			include '*.xml', '*.xsd'
			exclude '**/build/**'
		}
		eclipseWtp('xml', '4.13.0')
	}
	format 'json', {
		target fileTree('.') {
			include '*.json'
			exclude '**/build/**'
		}
		eclipseWtp('json', '4.13.0')
	}
}

/*
jbake {
	srcDirName = 'src/documentation'
	destDirName = './manual/site'
}

bakePreview {
	input = project.file('manual/site')
	port = '8090'
}



task createjbakeignorefile {
	group = "documentation"
	doLast {

		def allFiles = fileTree("src/documentation/content").toList()
		allFiles.removeAll {
			it.toString().contains("adoc") || it.toString().contains("json") || it.toString().contains("md")
		}
		def ignoreFileName = "src/documentation/content/.jbakeignore"
		def ignoreFile = new File(ignoreFileName)
		ignoreFile.write(allFiles.join("\n"))
	}
}

clean.doLast {
	def fileList = fileTree("src/documentation/content").toList()

	fileList.each {
		if (it.toString().contains("ignore") || it.toString().contains("json") || it.toString().contains("tests") || it.toString().contains("Spec")) {
			file(it.toString()).delete()
		}
	}
}
*/

cobertura {
	coverageFormats = ['html','xml']
	coverageIgnoreTrivial = true
	coverageIgnores = ['org.slf4j.Logger.*']
	coverageReportDir = new File('manual/cobertura')
}

dependencies {
	compile name: 'soot-V4.1.0-SNAPSHOT'
	compile name: 'axml-2.0'
	compile name: 'AXMLPrinter2'
	compile name: 'okhttp-3.9.0'
	compile name: 'retrofit-2.1.0'

	compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.8'
	compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.8'

	implementation 'com.binarytweed:quarantining-test-runner:0.0.3'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
	compile 'commons-cli:commons-cli:1.4'
	compile 'junit:junit:4.13'
	compile 'org.codehaus.groovy:groovy:3.0.3'
	implementation 'org.mockito:mockito-core:3.3.3'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
	compile 'org.ow2.asm:asm:8.0.1'
}
//build.finalizedBy(bake)
